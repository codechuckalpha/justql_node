
// --- Layout Change Logic ---
const changeLayoutBtn = document.getElementById('change-layout-btn');
const layoutSelectorPopup = document.getElementById('layout-selector-popup');
const layoutOptionButtons = document.querySelectorAll('.layout-option-btn');
const gridElement = document.querySelector('.grid-stack'); // Get the grid element directly
const grid = gridElement ? gridElement.gridstack : null; // Get the grid instance

// Ensure grid instance is available before defining layouts
if (!grid) {
    console.error("GridStack instance not found. Layout change functionality disabled.");
    if (changeLayoutBtn) {
        changeLayoutBtn.disabled = true;
        changeLayoutBtn.title = "GridStack not initialized.";
    }
    return; // Exit if grid is not found
}

// Define the predefined layouts
// gs-w: Grid width (out of 12 columns), gs-h: Grid height (in units of cellHeight)
// gs-x, gs-y: Grid x, y positions
const predefinedLayouts = {
    layout1: [ // Default: Stacked in three rows
        { id: 'sql-editor-item', x: 0, y: 0, w: 12, h: 3 },
        { id: 'data-table-section', x: 0, y: 3, w: 12, h: 3 },
        { id: 'data-analysis-section', x: 0, y: 6, w: 12, h: 5 } // Adjusted h for chart
    ],
    layout2: [ // Three Even Columns
        { id: 'sql-editor-item', x: 0, y: 0, w: 4, h: 11 }, // Total height for all 3: 3+3+5 = 11
        { id: 'data-table-section', x: 4, y: 0, w: 4, h: 11 },
        { id: 'data-analysis-section', x: 8, y: 0, w: 4, h: 11 }
    ],
    layout3: [ // Left 1/3 (SQL Editor) & Stacked Right 2/3 (Data Table, Data Visualization)
        { id: 'sql-editor-item', x: 0, y: 0, w: 4, h: 11 }, // Full height 1/3 on left
        { id: 'data-table-section', x: 4, y: 0, w: 8, h: 5 }, // Top 2/3 right
        { id: 'data-analysis-section', x: 4, y: 5, w: 8, h: 6 }  // Bottom 2/3 right
    ]
};

function applyLayout(layoutName) {
    const layoutConfig = predefinedLayouts[layoutName];
    if (!layoutConfig) {
        console.error(`Layout '${layoutName}' not found.`);
        return;
    }

    // Use grid.load to update positions and sizes of existing items
    // It's important to pass a clone of the array as grid.load might modify it
    grid.load([...layoutConfig], true); 
    
    // After loading layout, force chart resize to adapt to new container dimensions
    const chartContainer = document.getElementById('chart-container');
    if (chartContainer && chartContainer.data) {
        window.requestAnimationFrame(() => {
            Plotly.Plots.resize(chartContainer);
        });
    }
}

if (changeLayoutBtn && layoutSelectorPopup) {
    changeLayoutBtn.addEventListener('click', (event) => {
        event.stopPropagation(); // Prevent click from bubbling to document and closing immediately
        layoutSelectorPopup.classList.toggle('hidden');

        // Position the popup precisely below the button
        const btnRect = changeLayoutBtn.getBoundingClientRect();
        layoutSelectorPopup.style.top = `${btnRect.bottom + 5}px`; // 5px below button
        // To align with the right edge of the button:
        layoutSelectorPopup.style.left = `${btnRect.left}px`; // Align left edge of popup with button left edge
    });

    // Event listeners for each layout option button inside the popup
    layoutOptionButtons.forEach(button => {
        button.addEventListener('click', (event) => {
            event.stopPropagation(); // Prevent click from bubbling
            const layoutName = button.dataset.layout;
            applyLayout(layoutName);
            layoutSelectorPopup.classList.add('hidden'); // Hide popup after selection
        });
    });

    // Close popup if clicked outside
    document.addEventListener('click', (event) => {
        // Check if click is outside the popup AND not on the toggle button itself
        if (!layoutSelectorPopup.contains(event.target) && !changeLayoutBtn.contains(event.target)) {
            layoutSelectorPopup.classList.add('hidden');
        }
    });
}

// Apply the default layout on initial load (Layout 1)
applyLayout('layout1');